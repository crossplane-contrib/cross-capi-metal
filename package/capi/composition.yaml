# Composition of CAPI components and Helm ProviderConfig
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: Composition
metadata:
  name: packet.cluster.capi.crossplane.io
  labels:
    provider: packet
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: cluster.capi.crossplane.io/v1alpha1
    kind: Cluster
  resources:
    - base:
        apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
        kind: KubeadmControlPlane
        metadata:
          name: capi-quickstart-control-plane
          namespace: default
        spec:
          infrastructureTemplate:
            apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
            kind: PacketMachineTemplate
            name: capi-quickstart-control-plane
          kubeadmConfigSpec:
            clusterConfiguration:
              apiServer:
                extraArgs:
                  cloud-provider: external
              controllerManager:
                extraArgs:
                  cloud-provider: external
            initConfiguration:
              nodeRegistration:
                kubeletExtraArgs:
                  cloud-provider: external
            joinConfiguration:
              nodeRegistration:
                kubeletExtraArgs:
                  cloud-provider: external
            postKubeadmCommands:
            - |
              cat <<EOF >> /etc/network/interfaces
              auto lo:0
              iface lo:0 inet static
                address {{ .controlPlaneEndpoint }}
                netmask 255.255.255.255
              EOF
            - systemctl restart networking
            - PROJECT_ID=replaceme
            - 'kubectl --kubeconfig /etc/kubernetes/admin.conf create secret generic -n kube-system packet-cloud-config --from-literal=cloud-sa.json=''{"apiKey": "{{ .apiKey }}","projectID": "${PROJECT_ID}", "eipTag": "cluster-api-provider-packet:cluster-id:capi-quickstart"}'''
            - kubectl apply --kubeconfig /etc/kubernetes/admin.conf -f https://github.com/packethost/packet-ccm/releases/download/v1.1.0/deployment.yaml
            preKubeadmCommands:
            - sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
            - swapoff -a
            - mount -a
            - apt-get -y update
            - DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
            - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
            - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            - apt-key fingerprint 0EBFCD88
            - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            - apt-get update -y
            - TRIMMED_KUBERNETES_VERSION=$(echo v1.18.2 | sed 's/\./\./g' | sed 's/^v//')
            - RESOLVED_KUBERNETES_VERSION=$(apt-cache policy kubelet | awk -v VERSION=${TRIMMED_KUBERNETES_VERSION} '$1~ VERSION { print $1 }' | head -n1)
            - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips docker-ce docker-ce-cli containerd.io kubelet=${RESOLVED_KUBERNETES_VERSION} kubeadm=${RESOLVED_KUBERNETES_VERSION} kubectl=${RESOLVED_KUBERNETES_VERSION}
            - systemctl daemon-reload
            - systemctl enable docker
            - systemctl start docker
            - ping -c 3 -q {{ .controlPlaneEndpoint }} && echo OK || ip addr add {{ .controlPlaneEndpoint }} dev lo
          replicas: 3
          version: v1.18.2
      patches:
        # These kind to metadata.name transforms are a hack to preserve the
        # resultant object name. This means that only one CAPI Cluster can be
        # created using this composition. We must do this because CAPI types
        # don't allow for referencing other types by matchControllerRef
        # (https://doc.crds.dev/github.com/packethost/crossplane-provider-packet/ports.metal.equinix.com/Assignment/v1alpha1#spec-forProvider-deviceIdSelector-matchControllerRef).
        # We could improve the situation by still patching the names with a
        # predictable output, and using that same patch in the references.
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                Cluster: capi-quickstart-control-plane
        - fromFieldPath: spec.projectId
          toFieldPath: spec.kubeadmConfigSpec.postKubeadmCommands[2]
          transforms:
            - type: string
              string:
                fmt: "PROJECT_ID=%s"
      readinessChecks:
        - type: None
    - base:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: PacketMachineTemplate
        metadata:
          name: capi-quickstart-control-plane
          namespace: default
        spec:
          template:
            spec:
              OS: ubuntu_18_04
              billingCycle: hourly
              machineType: t1.small
              sshKeys:
              - my-ssh
              tags: []
      patches:
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                Cluster: capi-quickstart-control-plane
      readinessChecks:
        - type: None
    - base:
        apiVersion: cluster.x-k8s.io/v1alpha3
        kind: Cluster
        metadata:
          name: capi-quickstart
          namespace: default
        spec:
          clusterNetwork:
            pods:
              cidrBlocks:
              - 192.168.0.0/16
            services:
              cidrBlocks:
              - 172.26.0.0/16
          controlPlaneRef:
            apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
            kind: KubeadmControlPlane
            name: capi-quickstart-control-plane
          infrastructureRef:
            apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
            kind: PacketCluster
            name: capi-quickstart
      patches:
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                Cluster: capi-quickstart
      readinessChecks:
        - type: None
    - base:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: PacketCluster
        metadata:
          name: capi-quickstart
          namespace: default
        spec:
          facility: ewr1
          projectID: 5yd4thd-5h35-5hwk-1111-125gjej40930
      patches:
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                Cluster: capi-quickstart
        - fromFieldPath: spec.projectId
          toFieldPath: spec.projectID
      readinessChecks:
        - type: None
    - base:
        apiVersion: cluster.x-k8s.io/v1alpha3
        kind: MachineDeployment
        metadata:
          labels:
            cluster.x-k8s.io/cluster-name: capi-quickstart
            pool: worker-a
          name: capi-quickstart-worker-a
          namespace: default
        spec:
          clusterName: capi-quickstart
          replicas: 3
          selector:
            matchLabels:
              cluster.x-k8s.io/cluster-name: capi-quickstart
              pool: worker-a
          template:
            metadata:
              labels:
                cluster.x-k8s.io/cluster-name: capi-quickstart
                pool: worker-a
            spec:
              bootstrap:
                configRef:
                  apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
                  kind: KubeadmConfigTemplate
                  name: capi-quickstart-worker-a
              clusterName: capi-quickstart
              infrastructureRef:
                apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
                kind: PacketMachineTemplate
                name: capi-quickstart-worker-a
              version: v1.18.2
      patches:
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                Cluster: capi-quickstart-worker-a
      readinessChecks:
        - type: None
    - base:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: PacketMachineTemplate
        metadata:
          name: capi-quickstart-worker-a
          namespace: default
        spec:
          template:
            spec:
              OS: ubuntu_18_04
              billingCycle: hourly
              machineType: t1.small
              sshKeys:
              - my-ssh
              tags: []
      patches:
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                Cluster: capi-quickstart-worker-a
      readinessChecks:
        - type: None
    - base:
        apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
        kind: KubeadmConfigTemplate
        metadata:
          name: capi-quickstart-worker-a
          namespace: default
        spec:
          template:
            spec:
              joinConfiguration:
                nodeRegistration:
                  kubeletExtraArgs:
                    cloud-provider: external
              preKubeadmCommands:
              - sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
              - swapoff -a
              - mount -a
              - apt-get -y update
              - DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
              - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
              - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
              - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              - apt-key fingerprint 0EBFCD88
              - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              - apt-get update -y
              - TRIMMED_KUBERNETES_VERSION=$(echo v1.18.2 | sed 's/\./\./g' | sed 's/^v//')
              - RESOLVED_KUBERNETES_VERSION=$(apt-cache policy kubelet | awk -v VERSION=${TRIMMED_KUBERNETES_VERSION} '$1~ VERSION { print $1 }' | head -n1)
              - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips docker-ce docker-ce-cli containerd.io kubelet=${RESOLVED_KUBERNETES_VERSION} kubeadm=${RESOLVED_KUBERNETES_VERSION} kubectl=${RESOLVED_KUBERNETES_VERSION}
              - systemctl daemon-reload
              - systemctl enable docker
              - systemctl start docker
      patches:
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                Cluster: capi-quickstart-worker-a
      readinessChecks:
        - type: None
    - base:
        apiVersion: helm.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              # This ProviderConfig uses the above CAPI cluster's kubeconfig as
              # its credentials secret. This another place that we could
              # parameterize the name.
              namespace: default
              key: capi-quickstart-kubeconfig
      patches:
        - fromFieldPath: kind
          toFieldPath: metadata.name
          transforms:
            - type: map
              map:
                # Setting name to default will make it default ProviderConfig
                # for any Helm Release.
                Cluster: default
      readinessChecks:
        - type: None
